services:
  db:
    image: postgres:15-alpine
    container_name: db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${DB_NAME:-digicells}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - DJANGO_SUPERUSER_USERNAME=${SUPERUSER_USERNAME:-super}
      - DJANGO_SUPERUSER_EMAIL=${SUPERUSER_EMAIL:-super@super.com}
      - DJANGO_SUPERUSER_PASSWORD=${SUPERUSER_PASSWORD:-super1122}

    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network


  web-init:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: web-init
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    environment:
      - DJANGO_SETTINGS_MODULE=digiCells.settings.production
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-change-this-in-production}
      - DATABASE_URL=postgres://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-digicells}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,172.187.225.83,member.bit.bio,fs.capture.dev.workplaceservicing.co.uk,rdg.capture.dev.workplaceservicing.co.uk}
      - SUPERUSER_USERNAME=${SUPERUSER_USERNAME:-super}
      - SUPERUSER_EMAIL=${SUPERUSER_EMAIL:-super@super.com}
      - SUPERUSER_PASSWORD=${SUPERUSER_PASSWORD:-super1122}
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "
        echo 'üîÑ Waiting for database to be ready...' &&
        sleep 5 &&
        echo 'üîÑ Running database migrations...' &&
        cd digiCells &&
        python manage.py migrate --noinput &&
        echo 'üìÅ Collecting static files...' &&
        python manage.py collectstatic --noinput --clear &&
        echo 'üë§ Creating superuser if not exists...' &&
        python manage.py createsuperuser --username ${SUPERUSER_USERNAME:-super} --email ${SUPERUSER_EMAIL:-super@super.com} --noinput || true &&
        echo '‚úÖ Database setup complete!' &&
        echo 'üöÄ Ready to start application...'
      "
    restart: "no"
    networks:
      - app-network

  web:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: web
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=digiCells.settings.production
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-change-this-in-production}
      - DATABASE_URL=postgres://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-digicells}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,172.187.225.83,member.bit.bio,fs.capture.dev.workplaceservicing.co.uk,rdg.capture.dev.workplaceservicing.co.uk}
    depends_on:
      web-init:
        condition: service_completed_successfully
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/', timeout=10)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.production.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./ssl:/etc/nginx/ssl  # For SSL certificates
    depends_on:
      - web
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # Optional: Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_SUPER_PASSWORD=${GRAFANA_PASSWORD:-super}
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
  static_volume:
  media_volume:
  logs_volume:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge
